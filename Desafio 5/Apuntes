Explicación Patrón Reactor

Básicamente el demultiplexor es un switch on/off que me prende la rueda del event loop. (síncrono)

Monitorea todos los recursos (dentro de los cuales hay tareas) y cuando haya un recurso disponible
(una tarea por realizar, o un "evento") la manda la cola de eventos con su handler asociado.
Entonces el event loop comienza a correr (de manera asíncrona) y lee el evento y se ejecuta el handler asociado
a ese evento o callback.
Una vez se ejecuta el handler se lo devuelve al event loop, el cual pasa al siguiente evento inmediatamente.
Una vez se completa toda la cola de eventos, se apaga el event loop ya que se bloquea el demultiplexor.


http://latentflip.com/loupe/?code=CgpmdW5jdGlvbiBzYWx1ZGFyTWFzVGFyZGUoKXsKCXZhciBzY[…]dWRhck1hc1RhcmRlKCk7!!!PGJ1dHRvbj5DbGljayBtZSE8L2J1dHRvbj4%3D

https://medium.com/@nicomf1982/reactor-pattern-en-node-js-4f25ee703299

https://searchapparchitecture.techtarget.com/definition/RESTful-API

https://blog.nearsoftjobs.com/entendiendo-la-magia-detr%C3%A1s-de-nodejs-y-su-event-loop-8335e3b35e58